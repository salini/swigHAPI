//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace unittest
{
	public class TestReport
	{
		private static List< KeyValuePair<bool, string>> assertResults = new List<KeyValuePair<bool, string>>();
		private static List< KeyValuePair<bool, string>> methodResults = new List<KeyValuePair<bool, string>>();

		public TestReport ()
		{
		}

		public static string getResults() {
			int Natest = assertResults.Count;
			int Nmtest = methodResults.Count;
			int Naerr = 0;
			int Nmerr = 0;
			string errorStr = "";
			foreach (KeyValuePair<bool, string> kv in assertResults) {
				if (kv.Key == false) {
					++Naerr;
					errorStr += kv.Value + "\n";
				}
			}
			foreach (KeyValuePair<bool, string> kv in methodResults) {
				if (kv.Key == false) {
					++Nmerr;
					errorStr += kv.Value + "\n";
				}
			}
			string resStr;
			resStr = "\n============================================\nErrors:\n";
			if (Naerr == 0 && Nmerr == 0) {
				resStr += String.Format ("Assert: {0}/{1}\nMethods: {2}/{3}\nOK\n", Naerr, Natest, Nmerr, Nmtest);
			} else {
				resStr += errorStr+"\n";
				resStr += "============================================\nErrors:\n";
				resStr += String.Format ("Assert: {0}/{1}\nMethods: {2}/{3}\nERROR: some tests didn't pass\n", Naerr, Natest, Nmerr, Nmtest);
			}
			return resStr;
		}
		
		public static void printResults() {
			Console.WriteLine (getResults ());
		}

		public static void AddAssertResult(bool res, string explain) {
			assertResults.Add (new KeyValuePair<bool, string> (res, explain));
		}
		public static void AddMethodResult(bool res, string explain) {
			methodResults.Add (new KeyValuePair<bool, string> (res, explain));
		}
	}
}

