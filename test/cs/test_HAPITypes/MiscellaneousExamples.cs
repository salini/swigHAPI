//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1026
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using HAPI;
using System.Diagnostics;
using System.Threading;

namespace test_HAPITypes
{
	public class MiscellaneousExamples
	{
		public static void movingSphere() {
			AnyHapticsDevice hd = new AnyHapticsDevice ();
			GodObjectRenderer renderer = new GodObjectRenderer();
			hd.setHapticsRenderer( renderer );
			if (!initializeAll (hd)) {
				return;
			}
			
			HapticPrimitive haptic_shpere = createHapticSphere ();
			
			hd.addShape( haptic_shpere );
			hd.transferObjects();
			
			
			//===========================
			double v = 0;
			double c = 0, a = 0.02, f = 0.3, p = 0;
			Stopwatch watch = new Stopwatch ();
			watch.Start ();
			while (watch.ElapsedMilliseconds<20000.0) {
				Console.WriteLine("t = "+watch.ElapsedMilliseconds.ToString() );
				v = c + a*(f*2*Math.PI)*Math.Sin( (f*2*Math.PI)*watch.ElapsedMilliseconds * 0.001 + p);
				haptic_shpere.setVelocity(new Vec3(v,0.0,0.0) );
				Thread.Sleep(10);
			}
			
			finalizeAll(hd);
		}

		public static bool initializeAll(HAPIHapticsDevice hd) {
			if (hd.initDevice () != HAPIHapticsDevice.ErrorCode.SUCCESS) {
				Console.WriteLine ("Error while initializing haptic device");
				Console.WriteLine ( hd.getLastErrorMsg() );
				return false;
			}
			
			hd.enableDevice();
			return true;
		}
		
		public static void finalizeAll(HAPIHapticsDevice hd) {
			//===========================
			hd.disableDevice();
			hd.releaseDevice();
			Console.WriteLine ("END of script");
		}

		public static HapticPrimitive createHapticSphere(double stiff=5.0, Vec3 center= null, double radius=0.03) {
			// Creating a default surface.
			center = (center == null) ? new Vec3(0,0,0) : center;
			FrictionSurface surface = new FrictionSurface (stiff);
			Sphere sphere = new Sphere( center, radius );
			HapticPrimitive haptic_shpere =  new HapticPrimitive(
				sphere, surface, FaceType.FRONT );
			return haptic_shpere;
		}

	}
}

