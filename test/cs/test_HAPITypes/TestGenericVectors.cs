//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using unittest;

using HAPI;


namespace test_HAPITypes
{
	public class TestGenericVectors : TestCase<TestGenericVectors>
	{
		public TestGenericVectors ()
		{
		}

		public void test_VecInt() {
			VecInt vint = new VecInt();
			for (int i=10; i>0; --i) {
				vint.Add (i);
			}
			AssertTrue (vint.Count == 10);
			bool ok=true;
			for (int i=0; i<10; ++i) {
				if( vint[i] != 10-i ) ok = false;
			}
			AssertTrue(ok);
		}
		
		public void test_VecGeometryPrimitive() {
			VecGeometryPrimitive vgeo = new VecGeometryPrimitive ();
			vgeo.Add( new Cylinder (0.1, 0.1) );
			vgeo.Add( new Sphere (new Vec3(), 0.1) );
			vgeo.Add( new AABox(new Vec3(-0.1,-0.1,-0.1), new Vec3(0.1,0.1,0.1) ) );

			AssertTrue (vgeo.Count == 3);

			vgeo [2] = new Cylinder (0.1, 0.1);
		}

		public void test_VecLineSegment() {
			VecLineSegment vle = new VecLineSegment ();
			for (int i=0; i<5; ++i) {
				vle.Add( new LineSegment(new Vec3(), new Vec3(i*0.1,i*0.2,i*0.3) ) );
			}

			AssertTrue (vle.Count == 5);
			bool ok=true;
			for (int i=0; i<5; ++i) {
				if( Math.Abs( vle[i].end.x - i*0.1) > 1e-6 ) ok = false;
				if( Math.Abs( vle[i].end.y - i*0.2) > 1e-6 ) ok = false;
				if( Math.Abs( vle[i].end.z - i*0.3) > 1e-6 ) ok = false;
			}
			AssertTrue(ok);
		}

		public void test_VecPoint() {
			VecPoint vpt = new VecPoint ();
			for (int i=0; i<5; ++i) {
				vpt.Add( new Point(new Vec3(i*0.1,i*0.2,i*0.3) ) );
			}

			AssertTrue (vpt.Count == 5);
			bool ok=true;
			for (int i=0; i<5; ++i) {
				if( Math.Abs( vpt[i].position.x - i*0.1) > 1e-6 ) ok = false;
				if( Math.Abs( vpt[i].position.y - i*0.2) > 1e-6 ) ok = false;
				if( Math.Abs( vpt[i].position.z - i*0.3) > 1e-6 ) ok = false;
			}
			AssertTrue(ok);
		}

		public void test_VecTriangle() {
			VecTriangle vtri = new VecTriangle();
			for (int i=0; i<5; ++i) {
				vtri.Add( new Triangle(new Vec3(i*0.1,i*0.1,i*0.1), new Vec3(i*0.2,i*0.2,i*0.2), new Vec3(i*0.3,i*0.3,i*0.3) ) );
			}
			
			AssertTrue (vtri.Count == 5);
			bool ok=true;
			for (int i=0; i<5; ++i) {
				if( Math.Abs( vtri[i].a.x - i*0.1) > 1e-6 ) ok = false;
				if( Math.Abs( vtri[i].a.y - i*0.1) > 1e-6 ) ok = false;
				if( Math.Abs( vtri[i].a.z - i*0.1) > 1e-6 ) ok = false;

				if( Math.Abs( vtri[i].b.x - i*0.2) > 1e-6 ) ok = false;
				if( Math.Abs( vtri[i].b.y - i*0.2) > 1e-6 ) ok = false;
				if( Math.Abs( vtri[i].b.z - i*0.2) > 1e-6 ) ok = false;

				if( Math.Abs( vtri[i].c.x - i*0.3) > 1e-6 ) ok = false;
				if( Math.Abs( vtri[i].c.y - i*0.3) > 1e-6 ) ok = false;
				if( Math.Abs( vtri[i].c.z - i*0.3) > 1e-6 ) ok = false;
			}
			AssertTrue(ok);
		}
		
		public void test_VecVec3() {
			VecVec3 vv3 = new VecVec3();
			for (int i=0; i<5; ++i) {
				vv3.Add(new Vec3(i*0.1,i*0.2,i*0.3) );
			}
			
			AssertTrue (vv3.Count == 5);
			bool ok=true;
			for (int i=0; i<5; ++i) {
				if( Math.Abs( vv3[i].x - i*0.1) > 1e-6 ) ok = false;
				if( Math.Abs( vv3[i].y - i*0.2) > 1e-6 ) ok = false;
				if( Math.Abs( vv3[i].z - i*0.3) > 1e-6 ) ok = false;
			}
			AssertTrue(ok);
		}

		/*
        //CANNOT INSTANCIATE BASE ELEMENT IN THE FOLLOWING CLASSES
		public void test_VecHAPIForceEffect() {
			VecHAPIForceEffect vfe = new VecHAPIForceEffect();
		}
		public void test_VecHAPIHapticShape() {
			VecHAPIHapticShape vhs = new VecHAPIHapticShape();
		}

		public void test_VecPairShapeContactInfo() {
			VecPairShapeContactInfo = new VecPairShapeContactInfo ();
		}
		*/
		
	}
}

