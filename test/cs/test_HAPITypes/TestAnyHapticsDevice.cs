//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;


using unittest;

using HAPI;

namespace test_HAPITypes
{
	public class TestAnyHapticsDevice : TestCase<TestAnyHapticsDevice>
	{
		public TestAnyHapticsDevice ()
		{
		}

		public void test_initDevice() {
			AnyHapticsDevice hd = new AnyHapticsDevice ();

			if (!AssertTrue (hd.initDevice () == HAPIHapticsDevice.ErrorCode.SUCCESS)) { //Is haptic device connected?
				return;
			}
			if (!AssertTrue (hd.enableDevice () == HAPIHapticsDevice.ErrorCode.SUCCESS)) {
				return;
			}
			if (!AssertTrue (hd.disableDevice () == HAPIHapticsDevice.ErrorCode.SUCCESS)) {
				return;
			}
			if (!AssertTrue (hd.releaseDevice () == HAPIHapticsDevice.ErrorCode.SUCCESS)) {
				return;
			}
			return;
		}

		public void test_setRenderer() {
			AnyHapticsDevice hd0 = new AnyHapticsDevice ();
			RuspiniRenderer  r0  = new RuspiniRenderer();
			hd0.setHapticsRenderer( r0 );
			AssertThrow<csHAPI.AlreadyDisownException>( () => { hd0.setHapticsRenderer( r0 ); } );
			disposeAll (hd0, r0);

			AnyHapticsDevice hd1 = new AnyHapticsDevice ();
			GodObjectRenderer r1 = new GodObjectRenderer();
			hd1.setHapticsRenderer( r1 );
			disposeAll (hd1, r1);

			AnyHapticsDevice hd2 = new AnyHapticsDevice ();
			GodObjectRenderer r2 = new GodObjectRenderer();
			RuspiniRenderer  r3  = new RuspiniRenderer();

			hd2.setHapticsRenderer( r2 );
			hd2.setHapticsRenderer( r3 );
			disposeAll (hd2, r2, r3);
		}

		public void test_addSphapes() {
			AnyHapticsDevice hd = new AnyHapticsDevice ();
			HapticPrimitive hp0 = createSphere (5, new Vec3 (-0.01, 0.0, -0.01), 0.01);
			HapticPrimitive hp1 = createSphere (5, new Vec3 (-0.01, 0.0, -0.01), 0.01);
			HapticPrimitive hp2 = createSphere (5, new Vec3 (-0.01, 0.0, -0.01), 0.01);
			HapticPrimitive hp3 = createSphere (5, new Vec3 (-0.01, 0.0, -0.01), 0.01);
			hd.addShape (hp0);
			hd.addShape (hp1);

			AssertThrow<csHAPI.AlreadyDisownException>( () => { hd.addShape (hp0); } );
			AssertTrue (hd.getShapes ().Count == 2);
			hd.removeShape (hp0);
			hd.removeShape (hp1);
			AssertTrue (hd.getShapes ().Count == 0);

			hd.addShape (hp2);
			hd.addShape (hp3);
			AssertTrue (hd.getShapes ().Count == 2);
			hd.clearShapes ();
			AssertTrue (hd.getShapes ().Count == 0);
			
			disposeAll (hd, hp0, hp1, hp2, hp3);
		}



		public void test_setGetShapes() {
			AnyHapticsDevice hd = new AnyHapticsDevice ();
			VecHAPIHapticShape shapes = new VecHAPIHapticShape();
			int N = 4;
			for (int i=0; i<N; ++i) {
				HAPIHapticShape obj = createSphere (5, new Vec3 (-0.01, 0.0, -0.01), 0.01);
				obj.setShapeId(N-i);
				shapes.Add(obj);
			}
			hd.setShapes (shapes);

			VecHAPIHapticShape outShapes = hd.getShapes ();
			AssertTrue (outShapes.Count == N);

			bool ok=true;
			for (int i=0; i<N; ++i) {
				if (outShapes [i].getShapeId() != N-i) ok = false;
			}
			AssertTrue(ok);
		}


		public void test_addForceEffect() {
			AnyHapticsDevice hd = new AnyHapticsDevice ();
			DummyHAPIForceEffect fe0 = new DummyHAPIForceEffect ();
			DummyHAPIForceEffect fe1 = new DummyHAPIForceEffect ();
			DummyHAPIForceEffect fe2 = new DummyHAPIForceEffect ();
			DummyHAPIForceEffect fe3 = new DummyHAPIForceEffect ();
			hd.addEffect (fe0);
			hd.addEffect (fe1);

			AssertThrow<csHAPI.AlreadyDisownException>( () => { hd.addEffect (fe0); } );
			AssertTrue (hd.getEffects ().Count == 2);
			hd.removeEffect (fe0);
			hd.removeEffect (fe1);
			AssertTrue (hd.getEffects ().Count == 0);

			hd.addEffect (fe2);
			hd.addEffect (fe3);
			AssertTrue (hd.getEffects ().Count == 2);
			hd.clearEffects ();
			AssertTrue (hd.getEffects ().Count == 0);

			disposeAll (hd, fe0, fe1, fe2, fe3);
		}


		public void test_setGetEffects() {
			AnyHapticsDevice hd = new AnyHapticsDevice ();
			VecHAPIForceEffect effects = new VecHAPIForceEffect();
			int N = 4;
			for (int i=0; i<N; ++i) {
				DummyHAPIForceEffect obj = new DummyHAPIForceEffect();
				effects.Add(obj);
			}
			hd.setEffects (effects );
			
			VecHAPIForceEffect outEffects = hd.getEffects ();
			AssertTrue (outEffects.Count == N);
		}





		protected static HapticPrimitive createSphere(double stiff=5.0, Vec3 center= null, double radius=0.03) {
			// Creating a default surface.
			center = (center == null) ? new Vec3(0,0,0) : center;
			FrictionSurface surface = new FrictionSurface (stiff);
			Sphere sphere = new Sphere( center, radius );
			HapticPrimitive haptic_shpere =  new HapticPrimitive(sphere, surface, FaceType.FRONT );
			return haptic_shpere;
		}


		protected void test_proxyShape() {
			AnyHapticsDevice hd      = new AnyHapticsDevice ();
			RuspiniRenderer renderer = new RuspiniRenderer();
			
			renderer.setProxyRadius (0.01);
			hd.setHapticsRenderer( renderer );
			if (!AssertTrue (hd.initDevice () == HAPIHapticsDevice.ErrorCode.SUCCESS)) {
				return;
			}
			if (!AssertTrue (hd.enableDevice () == HAPIHapticsDevice.ErrorCode.SUCCESS)) {
				return;
			}

			HapticPrimitive hp0 = createSphere (5, new Vec3 (-0.01, 0.0, -0.01), 0.01);
			HapticPrimitive hp1 = createSphere (5, new Vec3( 0.01,0.0,-0.01),0.01);
			HapticPrimitive hp2 = createSphere (5, new Vec3( 0.01,0.0, 0.01),0.01);
			HapticPrimitive hp3 = createSphere (5, new Vec3(-0.01,0.0, 0.01),0.01);
			hd.addShape( hp0 ); hd.addShape( hp1 ); hd.addShape( hp2); hd.addShape( hp3 );

			hd.transferObjects();
			
			if (!AssertTrue (hd.disableDevice () == HAPIHapticsDevice.ErrorCode.SUCCESS)) {
				return;
			}
			if (!AssertTrue (hd.releaseDevice () == HAPIHapticsDevice.ErrorCode.SUCCESS)) {
				return;
			}

			disposeAll (renderer, hp0, hp1, hp2, hp3);
		}
	}
}

