

MACRO(ADD_STATIC_POSTFIX_IF_NEEDED   LIB_NAME)
    if(NOT BUILD_SHARED_LIBS)
        set_target_properties(${LIB_NAME}  PROPERTIES  OUTPUT_NAME  "${LIB_NAME}_s")
    endif()
ENDMACRO()


MACRO(CONFIGURE_LIBRARY_GENERAL_HEADER   LIB_NAME   LIB_H_FILES)

    set(LIB_ALL_HEADERS_INCLUDE_STRING)
    foreach(FULLPATH_HEADER_NAME   ${${LIB_H_FILES}})
        GET_FILENAME_COMPONENT(HEADER_NAME ${FULLPATH_HEADER_NAME} NAME)
        if(NOT ${HEADER_NAME} STREQUAL "DllExport.h")
            set(LIB_ALL_HEADERS_INCLUDE_STRING "${LIB_ALL_HEADERS_INCLUDE_STRING}#include \"${LIB_NAME}/${HEADER_NAME}\"\n")
        endif()
    endforeach()
    
    configure_file(${CMAKE_SOURCE_DIR}/cmake/GenericLibraryHeader.h.in   ${CMAKE_BINARY_DIR}/include/${LIB_NAME}.h   @ONLY)
    
    LIST(APPEND   ${LIB_H_FILES}   ${CMAKE_BINARY_DIR}/include/${LIB_NAME}.h)
    
    
    INSTALL( FILES      ${CMAKE_BINARY_DIR}/include/${LIB_NAME}.h
        DESTINATION     include
        COMPONENT       headers
    )
ENDMACRO()



MACRO(INSTALL_HEADER   LIB_NAME   LIB_H_FILES)
    INSTALL( FILES      ${${LIB_H_FILES}}
        DESTINATION     include/${LIB_NAME}
        COMPONENT       headers
    )
ENDMACRO()


MACRO(INSTALL_LIBRARY   LIB_NAME   LIB_H_FILES)
    INSTALL(TARGETS   ${LIB_NAME}
        RUNTIME   DESTINATION bin    COMPONENT binaries
        LIBRARY   DESTINATION lib    COMPONENT libraries
        ARCHIVE   DESTINATION lib    COMPONENT libraries
    )

    INSTALL_HEADER(${LIB_NAME}   ${LIB_H_FILES})
ENDMACRO()



MACRO(INSTALL_HEADER_WITH_PREFIX   LIB_NAME   PREFIX_NAME   LIB_H_FILES)
    INSTALL( FILES      ${${LIB_H_FILES}}
        DESTINATION     ${PREFIX_NAME}/include/${LIB_NAME}
        COMPONENT       headers
    )
ENDMACRO()

MACRO(INSTALL_LIBRARY_WITH_PREFIX   LIB_NAME   PREFIX_NAME   LIB_H_FILES)
    INSTALL(TARGETS   ${LIB_NAME}
        RUNTIME   DESTINATION ${PREFIX_NAME}/bin    COMPONENT binaries
        LIBRARY   DESTINATION ${PREFIX_NAME}/lib    COMPONENT libraries
        ARCHIVE   DESTINATION ${PREFIX_NAME}/lib    COMPONENT libraries
    )

    INSTALL_HEADER_WITH_PREFIX(${LIB_NAME}   ${PREFIX_NAME}   ${LIB_H_FILES})
ENDMACRO()



MACRO(SETUP_LIBRARY   LIB_NAME   LIB_H_FILES   LIB_CPP_FILES)

    CONFIGURE_LIBRARY_GENERAL_HEADER(${LIB_NAME}   ${LIB_H_FILES})
    
    ADD_LIBRARY( ${LIB_NAME}
        ${${LIB_H_FILES}}
        ${${LIB_CPP_FILES}}
    )
    
    ADD_STATIC_POSTFIX_IF_NEEDED(${LIB_NAME})
    
    INSTALL_LIBRARY(${LIB_NAME}   ${LIB_H_FILES})
ENDMACRO()




MACRO(SETUP_QT_LIBRARY   LIB_NAME   LIB_H_FILES   LIB_CPP_FILES   LIB_H_UI_FILES   LIB_H_MOC_FILES)

    QT4_WRAP_UI(GENERATED_LIB_H_UI
        ${${LIB_H_UI_FILES}}
    )
    
    QT4_WRAP_CPP(GENERATED_LIB_H_MOC
        ${${LIB_H_MOC_FILES}}
    )
    
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}) #To get access to ui_header created by wrap_ui
    
    CONFIGURE_LIBRARY_GENERAL_HEADER(${LIB_NAME}   ${LIB_H_FILES})
    
    ADD_LIBRARY( ${LIB_NAME}
        ${${LIB_H_FILES}}
        ${${LIB_CPP_FILES}}
        ${GENERATED_LIB_H_UI}
        ${GENERATED_LIB_H_MOC}
    )
    
    ADD_STATIC_POSTFIX_IF_NEEDED(${LIB_NAME})
    
    INSTALL_LIBRARY(${LIB_NAME}   ${LIB_H_FILES})
    
ENDMACRO()




MACRO(ADD_ALL_SUBDIRECTORIES)
	# add all sub directories
	FILE(GLOB CHILDREN  * )
	FOREACH(CHILD ${CHILDREN})
		IF(IS_DIRECTORY ${CHILD})
			add_subdirectory(${CHILD})
		ENDIF()
	ENDFOREACH()
ENDMACRO()




MACRO(SETUP_ALL_EXAMPLES_AND_OPTIONS   EXAMPLES_FILES   EXAMPLES_DEPENDENCIES   STATUS_OPTION_AT_START)

    get_filename_component(CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)

    ##### TEST IF EXAMPLES SHOULD BE GENERATED
    SET(BUILD_EXAMPLES_${CURRENT_DIR_NAME} ${STATUS_OPTION_AT_START} CACHE BOOL "Toggle examples generation of folder ${CURRENT_DIR_NAME}")
    mark_as_advanced(BUILD_EXAMPLES_${CURRENT_DIR_NAME})
    if (NOT BUILD_EXAMPLES_${CURRENT_DIR_NAME})
        return()
    endif()

    FOREACH(EXAMPLE_CPP  ${${EXAMPLES_FILES}})

        GET_FILENAME_COMPONENT(EXAMPLE_NAME ${EXAMPLE_CPP} NAME_WE)
        ADD_EXECUTABLE( ${EXAMPLE_NAME}
            ${EXAMPLE_CPP}
        )

        TARGET_LINK_LIBRARIES( ${EXAMPLE_NAME}
            ${${EXAMPLES_DEPENDENCIES}}
        )

    ENDFOREACH()
    
ENDMACRO()


MACRO(SETUP_ALL_EXAMPLES   EXAMPLES_FILES   EXAMPLES_DEPENDENCIES)

	SETUP_ALL_EXAMPLES_AND_OPTIONS(${EXAMPLES_FILES}   ${EXAMPLES_DEPENDENCIES}   ON)

ENDMACRO()






MACRO(CONFIGURE_CPACK_APPLICATION_VERSION   VER_MAJOR   VER_MINOR   VER_PATCH)
    set(CPACK_PACKAGE_VERSION_MAJOR ${VER_MAJOR})
    set(CPACK_PACKAGE_VERSION_MINOR ${VER_MINOR})
    set(CPACK_PACKAGE_VERSION_PATCH ${VER_PATCH})
    set(CPACK_PACKAGE_VERSION       "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
ENDMACRO()



MACRO(INITIALIZE_CPACK_NSIS_PROPERTY_FILE)
    if(EXISTS    "${CMAKE_BINARY_DIR}/CPackOptions.cmake")
        FILE(REMOVE   "${CMAKE_BINARY_DIR}/CPackOptions.cmake")
    endif()
    FILE(WRITE   "${CMAKE_BINARY_DIR}/CPackOptions.cmake")
ENDMACRO()



MACRO(APPEND_CPACK_NSIS_PROPERTY   VAR_NAME   VAR_DATA)
    if(NOT DEFINED  CPACK_PROPERTIES_FILE)
        set(CPACK_PROPERTIES_FILE   "${CMAKE_BINARY_DIR}/CPackOptions.cmake")
    endif()
    set(PROPERTY_TEXT)
    if(EXISTS    "${CMAKE_BINARY_DIR}/CPackOptions.cmake")
        FILE(READ   "${CMAKE_BINARY_DIR}/CPackOptions.cmake"   PROPERTY_TEXT)
    endif()
    set(PROPERTY_TEXT "${PROPERTY_TEXT}SET(${VAR_NAME}  \"${VAR_DATA}\")\n")
    FILE(WRITE   "${CMAKE_BINARY_DIR}/CPackOptions.cmake"   ${PROPERTY_TEXT})
ENDMACRO()



MACRO(INCLUDE_ENVVARUPDATE_FILE_IN_NSIS_TEMPLATE)
    find_path(CMAKE_DIR_WITH_CPACK_FILES   cpack/EnvVarUpdate.nsh
        PATHS ${CMAKE_MODULE_PATH}
        NO_DEFAULT_PATH
    )
    set(CMAKE_ENVVARUPDATE_NSH ${CMAKE_DIR_WITH_CPACK_FILES}/cpack/EnvVarUpdate.nsh)
    string(REPLACE "/" "\\\\\\\\" CMAKE_ENVVARUPDATE_NSH ${CMAKE_ENVVARUPDATE_NSH})
    APPEND_CPACK_NSIS_PROPERTY(INCLUDE_ENVVARUPDATE_NSH   "  !include \\\\\\\"${CMAKE_ENVVARUPDATE_NSH}\\\\\\\"")
ENDMACRO()



MACRO(CONFIGURE_CPACK_GENERATION   PACK_NAME   INSTALL_NAME   README_PATH   LICENCE_PATH   ICON_PNG   ICON_ICO)

    set(CPACK_PACKAGE_NAME                  "${PACK_NAME}")
    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY   "Project: ${PACK_NAME}")
    set(CPACK_PACKAGE_VENDOR                "Space Applications Services")
    set(CPACK_PACKAGE_DESCRIPTION_FILE      "${README_PATH}")
    set(CPACK_RESOURCE_FILE_LICENSE         "${LICENCE_PATH}")
    set(CPACK_PACKAGE_INSTALL_DIRECTORY     "${INSTALL_NAME}")
    set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY  "${PACK_NAME}")
    set(CPACK_PACKAGE_ICON                  "${ICON_PNG}")

    if (WIN32)
        INITIALIZE_CPACK_NSIS_PROPERTY_FILE()
        
        set(CPACK_GENERATOR NSIS)
        set(CPACK_NSIS_DISPLAY_NAME     "${PACK_NAME}")
        set(CPACK_NSIS_PACKAGE_NAME     "${PACK_NAME}")
        set(CPACK_NSIS_CONTACT          "jsa@spaceapplications.com")
        set(CPACK_NSIS_MUI_ICON         "${ICON_ICO}")
        set(CPACK_NSIS_MUI_UNIICON      "${ICON_ICO}")
        
        INCLUDE_ENVVARUPDATE_FILE_IN_NSIS_TEMPLATE()
    endif()

ENDMACRO()




